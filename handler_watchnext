const connect_to_db = require('./db');
const talk = require('./Talk');


module.exports.get_by_id = async (event, context, callback) => {
    context.callbackWaitsForEmptyEventLoop = false;
    console.log('Received event:', JSON.stringify(event, null, 2));
    
    let body = {};
    if (event.body) {
        try {
            body = JSON.parse(event.body);
        } catch (e) {
            console.error('Invalid JSON body:', e);
        }
    }

    if (event.queryStringParameters) {
        body._id = body._id || event.queryStringParameters._id;
    }

    if (!body._id) {
        return callback(null, {
            statusCode: 500,
            headers: { 'Content-Type': 'text/plain' },
            body: 'Missing required ID'
        });
    }

    body.doc_per_page = body.doc_per_page || 10;
    body.page = body.page || 1;

    try {
        await connect_to_db();
        console.log('=> Fetching watch_next for ID:', body._id);
        const result = await talk.findById(body._id);

        if (!result) {
            return callback(null, {
                statusCode: 404,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ error: 'Talk not found' })
            });
        }

        const watchNextTalks = await talk.find({ _id: { $in: result.watch_next } });
        // Crea una lista con solo _id, title e url
        const watchNextWithTitles = watchNextTalks.map(t => ({
            _id: t._id,
            title: t.title,
            url: t.url
        }));

        return callback(null, {
            statusCode: 200,
            headers: { 'Content-Type': 'application/json' },
            //body: JSON.stringify({watch_next: result.watch_next})
            body: JSON.stringify({
                title: result.title,
                watch_next: watchNextWithTitles
            }, null, 2)
        });


    } catch (err) {
        console.error('Error fetching watch next:', err);
        return callback(null, {
            statusCode: err.statusCode || 500,
            headers: { 'Content-Type': 'text/plain' },
            body: 'Could not fetch the watch next.'
        });
    }
};


